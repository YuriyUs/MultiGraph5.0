package macko;

//import com.sun.glass.ui.Cursor;
import static com.sun.glass.ui.Cursor.CURSOR_NONE;
import javafx.beans.Observable;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Pos;
import javafx.geometry.Side;
import javafx.scene.Node;
import javafx.scene.chart.Axis;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Label;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Line;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Cursor;
import javafx.scene.control.Button;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.MenuItem;
import javafx.scene.layout.Border;
import javafx.scene.layout.BorderStroke;
import javafx.scene.layout.BorderStrokeStyle;
import javafx.scene.layout.BorderWidths;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.GridPane;

public class MarkerChart extends StackPane {

    // markerChart is the selected chart in MARKER MODE. it can be only one chart selected to change its markers
    // baseChart is the chart is the main chart. It is the first chat from the list
    private       LineChart markerChart; // is the selected chart in MARKER MODE
    private final LineChart baseChart; // is the first from the follwing list of charts
    private final ObservableList<LineChart> backgroundCharts = FXCollections.observableArrayList();
    private final Map<LineChart, Color> chartColorMap = new HashMap<>();
    private final ObservableList<CheckBox> legendBoxes = FXCollections.observableArrayList();
    private       Side legendSide= Side.BOTTOM;
    private final double yAxisWidth = 60;
    private final AnchorPane detailsWindow;

    private final double yAxisSeparation = 20;
    private double strokeWidth = 0.3;
    
    // chart can work in two modes. LineChart and Marker, where user can define markers for line.
    private enum ChartModes {
                   MARKER, // marker mode. works only with markers
                   CHART};// works with chart as a whole.
    private ChartModes chartMode; // to keep mode of chart
    
    private int seriesCounter=0; // used in method addSeries
    
    // my constructor
    public MarkerChart(NumberAxis xAxis, NumberAxis yAxis){
        this.baseChart = new LineChart(xAxis, yAxis);
        backgroundCharts.add(0, baseChart);
        styleBaseChart(baseChart);
        setFixedAxisWidth(baseChart);
        setAlignment(Pos.CENTER_LEFT);
        backgroundCharts.addListener((Observable observable) -> rebuildChart());
        detailsWindow = new AnchorPane();
        
        bindMouseEvents(baseChart, this.strokeWidth);

        rebuildChart();
    }



    private void bindMouseEvents(LineChart chart, Double strokeWidth) {
        final DetailsPopup detailsPopup = new DetailsPopup();
        getChildren().remove(detailsWindow);
        getChildren().add(detailsWindow);
        //if (baseChart.equals(chart)) getChildren().add(detailsWindow);
        detailsWindow.getChildren().add(detailsPopup);
        detailsWindow.prefHeightProperty().bind(heightProperty());
        detailsWindow.prefWidthProperty().bind(widthProperty());
        detailsWindow.setMouseTransparent(true);

        setOnMouseMoved(null);
        setMouseTransparent(false);

        final Axis xAxis = chart.getXAxis();
        final Axis yAxis = chart.getYAxis();
        //


        final Line xLine = new Line();
        final Line yLine = new Line();
        yLine.setFill(Color.GRAY);
        xLine.setFill(Color.GRAY);
        yLine.setStrokeWidth(strokeWidth/2);
        xLine.setStrokeWidth(strokeWidth/2);
        xLine.setVisible(false);
        yLine.setVisible(false);
        

        final Node chartBackground = chart.lookup(".chart-plot-background");
        for (Node n: chartBackground.getParent().getChildrenUnmodifiable()) {
            if (n != chartBackground && n != xAxis && n != yAxis) {
                n.setMouseTransparent(true);
            }
        }
        chartBackground.setCursor(Cursor.NONE);
        chartBackground.setOnMousePressed((MouseEvent event) -> {
            //chartBackground.getOnMouseMoved().handle(event);
            System.out.println("mouse pressed  chartMode="+chartMode);
            detailsPopup.setVisible(false);
            CheckBox cb = selectedCheckBox();
            if (chartMode == ChartModes.MARKER && cb != null){
                Long xValueLong = Math.round((double)markerChart.getXAxis().getValueForDisplay(event.getX()));
                Long yValueLong = Math.round((double)markerChart.getYAxis().getValueForDisplay(event.getY()));

                markerChart = (LineChart)((UserData)cb.getUserData()).chart;
                markerChart.getData().add(1, new LineChart.Series<>());
                XYChart.Series<Long,Long> series = (XYChart.Series<Long,Long>) markerChart.getData().get(1);
                series.getData().add(new XYChart.Data<>(xValueLong,yValueLong));
                series.getData().add(new XYChart.Data<>(xValueLong++,yValueLong++)); //end point of line
                styleChartLine(markerChart, chartColorMap.get(markerChart));

            }
         
 
        });
        chartBackground.setOnMouseReleased((event) -> {
            chartBackground.getOnMouseMoved().handle(event);
            detailsPopup.setVisible(true);
            if (chartMode == ChartModes.MARKER && selectedCheckBox() != null){
                Long xValueLong = Math.round((double)markerChart.getXAxis().getValueForDisplay(event.getX()));
                Long yValueLong = Math.round((double)markerChart.getYAxis().getValueForDisplay(event.getY()));

                XYChart.Series<Long,Long> series = (XYChart.Series<Long,Long>) markerChart.getData().get(1);
                series.getData().add(new XYChart.Data<>(xValueLong,yValueLong));
            }
        });
        chartBackground.setOnMouseDragged((event) -> {
            chartBackground.getOnMouseMoved().handle(event);
            if (chartMode == ChartModes.MARKER && selectedCheckBox() != null){
                detailsPopup.setVisible(false);
                Long xValueLong = Math.round((double)markerChart.getXAxis().getValueForDisplay(event.getX()));
                Long yValueLong = Math.round((double)markerChart.getYAxis().getValueForDisplay(event.getY()));

                XYChart.Series<Long,Long> series = (XYChart.Series<Long,Long>) markerChart.getData().get(1);
                int ind= series.getData().size()-1;
                System.out.println("Series size="+ ind);
                series.getData().remove(ind);
                series.getData().add(new XYChart.Data<>(xValueLong,yValueLong));
                //styleChartLine(markerChart, chartColorMap.get(markerChart));
            }
    
        });
        chartBackground.setOnMouseEntered((event) -> {
            chartBackground.getOnMouseMoved().handle(event);
            detailsPopup.setVisible(true);
            xLine.setVisible(true);
            yLine.setVisible(true);
            detailsWindow.getChildren().addAll(xLine, yLine);
        });
        chartBackground.setOnMouseExited((event) -> {
            detailsPopup.setVisible(false);
            xLine.setVisible(false);
            yLine.setVisible(false);
            detailsWindow.getChildren().removeAll(xLine, yLine);
        });
        chartBackground.setOnMouseMoved(event -> {
            double x = event.getX() + chartBackground.getLayoutX();
            double y = event.getY() + chartBackground.getLayoutY();

            xLine.setStartX(10);
            xLine.setEndX(detailsWindow.getWidth()-10);
            xLine.setStartY(y+5);
            xLine.setEndY(y+5);

            yLine.setStartX(x+5);
            yLine.setEndX(x+5);
            yLine.setStartY(5);
            yLine.setEndY(detailsWindow.getHeight()-10);

            detailsPopup.showChartDescrpition(event);

            if (y + detailsPopup.getHeight() + 10 < getHeight()) {
                AnchorPane.setTopAnchor(detailsPopup, y+10);
            } else {
                AnchorPane.setTopAnchor(detailsPopup, y-10-detailsPopup.getHeight());
            }

            if (x + detailsPopup.getWidth() + 10 < getWidth()) {
                AnchorPane.setLeftAnchor(detailsPopup, x+10);
            } else {
                AnchorPane.setLeftAnchor(detailsPopup, x-10-detailsPopup.getWidth());
            }
        });
    }
    
    
    
    /**
     * 
     * @param baseChart 
     */
    private void styleBaseChart(LineChart baseChart) {
        baseChart.setCreateSymbols(false);
        baseChart.setLegendVisible(false);
        baseChart.getXAxis().setAutoRanging(false);
        baseChart.getXAxis().setAnimated(false);
        baseChart.getYAxis().setAnimated(false);
    }

    private void setFixedAxisWidth(LineChart chart) {
        chart.getYAxis().setPrefWidth(yAxisWidth);
        chart.getYAxis().setMaxWidth(yAxisWidth);
    }

    private void rebuildChart() {
        getChildren().clear();

        //getChildren().add(resizeBaseChart(baseChart));
        for (LineChart lineChart : backgroundCharts) {
            if (lineChart.equals(baseChart)) getChildren().add(resizeBaseChart(baseChart));
            else getChildren().add(resizeBackgroundChart(lineChart));
        }
        getChildren().add(detailsWindow);
    }

    private Node resizeBaseChart(LineChart lineChart) {
        HBox hBox = new HBox(lineChart);
        hBox.setAlignment(Pos.CENTER_LEFT);
        hBox.prefHeightProperty().bind(heightProperty());
        hBox.prefWidthProperty().bind(widthProperty());

        lineChart.minWidthProperty().bind(widthProperty().subtract((yAxisWidth+yAxisSeparation)*backgroundCharts.size()));
        lineChart.prefWidthProperty().bind(widthProperty().subtract((yAxisWidth+yAxisSeparation)*backgroundCharts.size()));
        lineChart.maxWidthProperty().bind(widthProperty().subtract((yAxisWidth+yAxisSeparation)*backgroundCharts.size()));

        return lineChart;
    }

    private Node resizeBackgroundChart(LineChart lineChart) {
        HBox hBox = new HBox(lineChart);
        hBox.setAlignment(Pos.CENTER_LEFT);
        hBox.prefHeightProperty().bind(heightProperty());
        hBox.prefWidthProperty().bind(widthProperty());
        hBox.setMouseTransparent(true);

        lineChart.minWidthProperty().bind(widthProperty().subtract((yAxisWidth + yAxisSeparation) * backgroundCharts.size()));
        lineChart.prefWidthProperty().bind(widthProperty().subtract((yAxisWidth + yAxisSeparation) * backgroundCharts.size()));
        lineChart.maxWidthProperty().bind(widthProperty().subtract((yAxisWidth + yAxisSeparation) * backgroundCharts.size()));

        lineChart.translateXProperty().bind(baseChart.getYAxis().widthProperty());
        lineChart.getYAxis().setTranslateX((yAxisWidth + yAxisSeparation) * backgroundCharts.indexOf(lineChart));

        return hBox;
    }

    public void addSeries(XYChart.Series series, Color lineColor) {
        //for the first seeries chart is already added into bacgroundCharts via 
        //constructor. for the rest of series new linecharts have to be created.
        LineChart lineChart;
        seriesCounter++;
        NumberAxis yAxis = new NumberAxis();
        NumberAxis xAxis = new NumberAxis();

        // style x-axis
        xAxis.setAutoRanging(false);
        xAxis.setVisible(false);
        xAxis.setOpacity(0.0); // somehow the upper setVisible does not work
        xAxis.lowerBoundProperty().bind(((NumberAxis) baseChart.getXAxis()).lowerBoundProperty());
        xAxis.upperBoundProperty().bind(((NumberAxis) baseChart.getXAxis()).upperBoundProperty());
        xAxis.tickUnitProperty().bind(((NumberAxis) baseChart.getXAxis()).tickUnitProperty());

        if (seriesCounter > 1){
            // style y-axis
            yAxis.setSide(Side.RIGHT);
            yAxis.setLabel(series.getName());

            // create chart
            lineChart = new LineChart(xAxis, yAxis);

        } else {
            lineChart=baseChart;
        }
        lineChart.setAnimated(false);
        lineChart.setLegendVisible(false);
        lineChart.setLegendSide(legendSide);
        lineChart.getData().add(series);
       
        styleBackgroundChart(lineChart, lineColor);
        setFixedAxisWidth(lineChart);


        chartColorMap.put(lineChart, lineColor);
        if (seriesCounter > 1) {
            backgroundCharts.add(seriesCounter-1,lineChart);
        }

    }

    private void styleBackgroundChart(LineChart lineChart, Color lineColor) {
        styleChartLine(lineChart, lineColor);

        Node contentBackground = lineChart.lookup(".chart-content").lookup(".chart-plot-background");
        contentBackground.setStyle("-fx-background-color: transparent;");

        lineChart.setVerticalZeroLineVisible(false);
        lineChart.setHorizontalZeroLineVisible(false);
        lineChart.setVerticalGridLinesVisible(false);
        lineChart.setHorizontalGridLinesVisible(false);
        lineChart.setCreateSymbols(false);
    }

    private String toRGBCode(Color color) {
        return String.format("#%02X%02X%02X",
                (int) (color.getRed() * 255),
                (int) (color.getGreen() * 255),
                (int) (color.getBlue() * 255));
    }

    private void styleChartLine(LineChart chart, Color lineColor) {
        chart.getYAxis().lookup(".axis-label").setStyle("-fx-text-fill: " + toRGBCode(lineColor) + "; -fx-font-weight: bold;");
        chart.lookupAll(".chart-series-line").forEach(line->{
            line.setStyle("-fx-stroke: " + toRGBCode(lineColor) + "; -fx-stroke-width: " + strokeWidth + ";");
        });
        

    }
    
    // H A N D L E R S
    /**
     * handler for chage property
     */
    public void handleChartProperty(LineChart chart){
        
    }
    
    public void handleDeleteChart(LineChart chart){
        
    }
    
    public void handleLegendChange(LineChart chart){
        
    }
    
    // G E T T E R S

    public Map<LineChart, Color> getColorMap(){
        return chartColorMap;
    }
    
    public ObservableList<CheckBox> getLegendBoxes(){
        return legendBoxes;
    }

    public Side getLegendSide(){
        return legendSide;
    }
    
    public void setLegendSide(Side side){
        this.legendSide = side;
    }
    
    public Node getLegend() {
        GridPane legend  = new GridPane();
        
        int colIndex=0;  // currently filling column    
        int rowIndex=0;  // currently filling row
        int colSpan = 1; //the number of columns the child's layout area spans horizontally
        int rowSpan =10; //the number of rows the child's layout area spans vertically.
        
        legend.setPadding(new Insets(2));
        
        
        if (baseChart.getLegendSide() == Side.LEFT || baseChart.getLegendSide() == Side.RIGHT){
            colSpan=0;  // legend is vertical type: 1 column and multiple rows
            legend.setVgap(5);
            legend.add(new Label("Legend:"),0,0);
            rowIndex++;
        } else {
            // legend of horizontal type: 5 columns and multiple rows
            colSpan=5;  // todo: find how to calculate column number depending on sze on the screen
            legend.setVgap(5);
            legend.setHgap(15);
            legend.setAlignment(Pos.CENTER);
        }
       
        // Adding the rest items to Legend
        for (final LineChart lineChart : backgroundCharts) {
            //Adding next item to the legend
            legend.add(newLegendItem(lineChart, backgroundCharts),colIndex,rowIndex);
            //managing legend's line and column indexes
            if (colIndex < colSpan){
                colIndex++;
            }
            else {
                colIndex=0;
                rowIndex++;
            }
        }
        Button mode = new Button("Mode: Chart");
        chartMode = ChartModes.CHART;
        mode.setPrefWidth(100d);
        mode.setOnAction(value-> handleMode(value));
        legend.add(mode,colIndex/2,rowIndex+1,2,1);
        legend.setStyle("-fx-padding: 0 10 20 10");
        return legend;
    }
    

    private CheckBox newLegendItem(LineChart lineChart, ObservableList<LineChart> backgroundCharts ){
        CheckBox checkBox = new CheckBox(lineChart.getYAxis().getLabel());
        legendBoxes.add(checkBox); // to keep all checkboxes in one place
        
        UserData userData = new UserData();
        userData.chartSelected = true;
        userData.markerSelected= false;
        userData.chart = lineChart;
        checkBox.setUserData(userData);
        checkBox.setSelected(true);
        checkBox.setStyle("-fx-text-fill: " + toRGBCode(chartColorMap.get(lineChart)) + "; -fx-font-weight: bold");
        checkBox.selectedProperty().addListener(new ChangeListener<Boolean>() {

            @Override
            public void changed(ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean newValue) {
                 if (oldValue != newValue){
                    //toggle the chart line and it's markers
                    // ind = 0 for line and ind++ is for markers
                    int ind = backgroundCharts.indexOf(lineChart);
                    final List<XYChart.Series<?,?>> s = backgroundCharts.get(ind).getData();
                    for (int i=0; i < s.size(); i++){
                        s.get(i).getNode().setVisible(checkBox.isSelected());
                    }
                    System.out.println("chartMode = "+chartMode);
                    switch (chartMode) {
                        case CHART: //  Chart mode
                        {
                            System.out.println("Mode=CHART. clicked on "+checkBox);
                            break;
                        } 
                        case MARKER: // Marker mode
                        default: 
                        {
                            for (CheckBox cb: legendBoxes){
                                if (checkBox.equals(cb)) {
                                    if (checkBox.isSelected()){
                                        //System.out.println("Mode=MARKER. clicked on "+cb);
                                        // remember the selected chart
                                        markerChart = (LineChart)((UserData)checkBox.getUserData()).chart;
                                        bindMouseEvents(markerChart, strokeWidth);
                                    }
                                }else{
                                    if (checkBox.isSelected() && cb.isSelected()) {
                                        //System.out.println("Mode=MARKER. remove selection from "+cb);
                                        cb.setSelected(false);

                                    }
                                }
                            }
                            break;
                        }
                        
                    }
                        
                }
            }
        });


        //Attach dropdown menu to every checknox for edit, delite or add markers
        final ContextMenu contextMenu = new ContextMenu();
        //contextMenu.setUserData(checkBox);

        MenuItem edit = new MenuItem("Edit");
        MenuItem space1 = new MenuItem("-----");
        MenuItem delete = new MenuItem("Delete");
        contextMenu.getItems().addAll( edit, space1, delete);

        edit.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                System.out.println("Edit...");
                handleEdit();
            }
        });
        delete.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                System.out.println("Delete...");
                handleDelete();
            }
        });
        checkBox.setContextMenu(contextMenu);
        checkBox.setOnMouseEntered(me -> {
            BorderStroke borderStroke = new BorderStroke(Color.GRAY, BorderStrokeStyle.SOLID, CornerRadii.EMPTY, new BorderWidths(1,2,2,0));
            checkBox.setBorder(new Border(borderStroke));
            //cb.setBackground(new Background(new BackgroundFill(Color.BLANCHEDALMOND   , new CornerRadii(2), new Insets(2))));

        });
        checkBox.setOnMouseExited(me -> {
            BorderStroke borderStroke = new BorderStroke(Color.TRANSPARENT, BorderStrokeStyle.SOLID, CornerRadii.EMPTY, new BorderWidths(1,2,2,0));
            checkBox.setBorder(new Border(borderStroke));
            //cb.setBackground(Background.EMPTY);
        });

        // transparent border is needed to avoid moving and resizing of controls when you hover the mouse over it.
        BorderStroke borderStroke = new BorderStroke(Color.TRANSPARENT, BorderStrokeStyle.SOLID, CornerRadii.EMPTY, new BorderWidths(1,2,2,0));
        checkBox.setBorder(new Border(borderStroke));
            
        return checkBox;
    }
    
    
        /**
     * looking up for the first selected checkbox 
     * in MARKER mode only one selected checkbox is allowed
     * @return checkbox or null
     */
    private CheckBox selectedCheckBox(){
        for (CheckBox cb: legendBoxes){
            if (cb.isSelected()) return cb;
        }
        System.out.println("No checkbox is selected in chartmode="+chartMode);
        return null;
    }
    
    /**
     * Switch mode of chart
     * available modes are :
     *      Chart - when user can see all lines
     *      Marker - where user can define new or edit exiting markers for individual line
     * 
     */
    private void handleMode(ActionEvent e){
        Button b = (Button)e.getSource();
//        chartMode = (ChartModes) b.getUserData();
        
        switch (chartMode) {
            case CHART: // toggle CHART -> MARKER
                        chartMode = ChartModes.MARKER;
                        b.setText("Mode: Marker");
                        for (CheckBox cb: legendBoxes){
                            UserData userData = (UserData)cb.getUserData();
                            userData.chartSelected = cb.isSelected();
                            cb.setUserData(userData); //keep status of checkbox to userdata
                            cb.setSelected((boolean)((UserData)cb.getUserData()).markerSelected);
                            // stop getting mouse event on base chart
                            setMouseTransparent(false);
                        }
                        break;
            case MARKER: // TOGGLE MARKET -> CHART
            default:    chartMode = ChartModes.CHART;
                        b.setText("Mode: Chart");
                        for (CheckBox cb: legendBoxes){
                            UserData userData = (UserData)cb.getUserData();
                            userData.markerSelected = cb.isSelected();
                            cb.setSelected((boolean)((UserData)cb.getUserData()).chartSelected); // restore status of checkbox from userdata
                        }
                        // restore getting mouse event on base chart
                        setMouseTransparent(false);
                        break;
        }
        //System.out.println("handleModeButton" + b.getUserData());
    }
    
    
    private void handleEdit() {
        System.out.println("handleEdit");

    }
    
    private void handleDelete() {
        System.out.println("handleDelete");

    }

    private class DetailsPopup extends VBox {

        private DetailsPopup() {
            setStyle("-fx-border-width: 1px; -fx-padding: 5 5 5 5px; -fx-border-color: gray; -fx-background-color: whitesmoke;");
            setVisible(false);
        }

        public void showChartDescrpition(MouseEvent event) {
            getChildren().clear();

            Long xValueLong = Math.round((double)baseChart.getXAxis().getValueForDisplay(event.getX()));

            for (LineChart lineChart : backgroundCharts) {
                HBox popupRow = buildPopupRow(event, xValueLong, lineChart);
                if (popupRow == null) continue;

                getChildren().add(popupRow);
            }
        }

        private HBox buildPopupRow(MouseEvent event, Long xValueLong, LineChart lineChart) {
            Label seriesName = new Label(lineChart.getYAxis().getLabel());
            seriesName.setTextFill(chartColorMap.get(lineChart));

            Number yValueForChart = getYValueForX(lineChart, xValueLong.intValue());
            if (yValueForChart == null) {
                return null;
            }
            Number yValueLower = Math.round(normalizeYValue(lineChart, event.getY() - 10));
            Number yValueUpper = Math.round(normalizeYValue(lineChart, event.getY() + 10));
            Number yValueUnderMouse = Math.round((double) lineChart.getYAxis().getValueForDisplay(event.getY()));

            // make series name bold when mouse is near given chart's line
            if (isMouseNearLine(yValueForChart, yValueUnderMouse, Math.abs(yValueLower.doubleValue()-yValueUpper.doubleValue()))) {
                seriesName.setStyle("-fx-font-weight: bold");
            }

            HBox popupRow = new HBox(10, seriesName, new Label("[Y="+yValueForChart+"]"));
            return popupRow;
        }

        private double normalizeYValue(LineChart lineChart, double value) {
            Double val = (Double) lineChart.getYAxis().getValueForDisplay(value);
            if (val == null) {
                return 0;
            } else {
                return val;
            }
        }
        private double normalizeXValue(LineChart lineChart, double value) {
            Double val = (Double) lineChart.getXAxis().getValueForDisplay(value);
            if (val == null) {
                return 0;
            } else {
                return val;
            }
        }

        private boolean isMouseNearLine(Number realYValue, Number yValueUnderMouse, Double tolerance) {
            return (Math.abs(yValueUnderMouse.doubleValue() - realYValue.doubleValue()) < tolerance);
        }

        public Number getYValueForX(LineChart chart, Number xValue) {
            List<XYChart.Data> dataList = ((List<XYChart.Data>)((XYChart.Series)chart.getData().get(0)).getData());
            for (XYChart.Data data : dataList) {
                if (data.getXValue().equals(xValue)) {
                    return (Number)data.getYValue();
                }
            }
            return null;
        }
    }
    
    public class UserData{
        private Boolean chartSelected;
        private Boolean markerSelected;
        private XYChart chart;
    }
}

